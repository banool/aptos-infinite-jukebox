name: CI

on:
  push:
    branches: [main]

jobs:
  # Check which files / paths have changed.
  # We use this to inform whether we should run later jobs.
  changes:
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      driver: ${{ steps.filter.outputs.driver }}
      move_module: ${{ steps.filter.outputs.move_module }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: '.github/filters.yml'
    - name: Print changes
      run: printf "Frontend changed $FRONTEND\nDriver changed $DRIVER\nMove module changed $MOVE_MODULE\n"
      env:
        FRONTEND: ${{ steps.filter.outputs.frontend }}
        DRIVER: ${{ steps.filter.outputs.driver }}
        MOVE_MODULE: ${{ steps.filter.outputs.move_module }}


  # Run the frontend tests.
  test_frontend:
    needs: [changes]
    if: needs.changes.outputs.frontend == 'true'
    defaults:
      run:
        working-directory: ./aptos_infinite_jukebox
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: subosito/flutter-action@v1
      with:
        flutter-version: '3.0.1'
        channel: stable
    - uses: actions/checkout@v3
    # Initial build and test
    - run: flutter pub get
    # Run tests
    - run: flutter test


  # Test and publish the Move module.
  publish_move_module:
    if: needs.tests.outputs.move_module == 'true'
    defaults:
      run:
        working-directory: ./move
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: wget https://github.com/aptos-labs/aptos-core/releases/download/aptos-cli-v1.0.1/aptos-cli-1.0.1-Ubuntu-x86_64.zip -O cli.zip
    - run: unzip cli.zip
    - run: yes "" | ./aptos init --assume-yes --private-key ${{ secrets.APTOS_ACCOUNT_PRIVATE_KEY }}
    - run: ./aptos move test
    - run: ./aptos move publish


  # Build web and upload the artifact.
  build_web:
    runs-on: ubuntu-latest
    needs: [changes]
    if: needs.changes.outputs.frontend == 'true'
    concurrency: ci-${{ github.ref }}
    defaults:
      run:
        working-directory: ./aptos_infinite_jukebox
    steps:
    - uses: actions/checkout@v3
    - uses: subosito/flutter-action@v1
      with:
        flutter-version: '3.3.5'
        channel: stable
    # Test and build
    - run: flutter pub get
    - run: flutter test
    - run: flutter build web
    # Copy in the the Spotify auth callback handler file
    - run: cp ../site/auth_callback.html build/web

    # Upload the artifact.
    - uses: actions/upload-pages-artifact@v1
      with:
        path: frontend/build/web


  # Deploy web using the artifact from the previous job.
  deploy_web:
    runs-on: ubuntu-latest
    needs: [build_web]
    concurrency: ci-${{ github.ref }}
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - uses: actions/configure-pages@v1
    - id: deployment
      uses: actions/deploy-pages@v1


  # Build the driver, push it to GHCR.
  build_driver:
    needs: [changes]
    if: needs.changes.outputs.driver == 'true'
    defaults:
      run:
        working-directory: ./driver
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository }}-driver
    - uses: docker/build-push-action@v3
      with:
        context: "driver"
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
